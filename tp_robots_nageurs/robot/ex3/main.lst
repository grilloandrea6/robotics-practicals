   1              		.cpu arm7tdmi
   2              		.arch armv4t
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.align	2
  18              		.syntax unified
  19              		.arm
  21              	register_handler:
  22              	.LVL0:
  23              	.LFB0:
  24              		.file 1 "main.c"
   1:main.c        **** #include "hardware.h"
   2:main.c        **** #include "module.h"
   3:main.c        **** #include "robot.h"
   4:main.c        **** #include "registers.h"
   5:main.c        **** 
   6:main.c        **** #define NUM_POS 4
   7:main.c        **** const uint8_t addresses[NUM_POS] = {72,73,74,21};
   8:main.c        **** int8_t positions[NUM_POS];
   9:main.c        **** 
  10:main.c        **** 
  11:main.c        **** /* Register callback function, handles some new registers on the radio.
  12:main.c        ****  * All these registers are of course completely useless, but it demonstrates how
  13:main.c        ****  * to implement a register callback function, and what it can do.
  14:main.c        ****  */
  15:main.c        **** static int8_t register_handler(uint8_t operation, uint8_t address, RadioData* radio_data)
  16:main.c        **** {
  25              		.loc 1 16 1 view -0
  26              		.cfi_startproc
  27              		@ Function supports interworking.
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  17:main.c        ****   uint8_t i;
  31              		.loc 1 17 3 view .LVU1
  18:main.c        ****   
  19:main.c        ****   switch (operation)
  32              		.loc 1 19 3 view .LVU2
  20:main.c        ****   {
  21:main.c        ****     case ROP_READ_MB:
  22:main.c        ****       if (address == 2) {
  33              		.loc 1 22 7 view .LVU3
  34              		.loc 1 22 10 is_stmt 0 view .LVU4
  35 0000 020051E3 		cmp	r1, #2
  36 0004 03005003 		cmpeq	r0, #3
  37 0008 0100A003 		moveq	r0, #1
  38              	.LVL1:
  39              		.loc 1 22 10 view .LVU5
  40 000c 0000A013 		movne	r0, #0
  41 0010 1EFF2F11 		bxne	lr
  42              	.LVL2:
  43              	.LBB4:
  44              	.LBI4:
  15:main.c        **** {
  45              		.loc 1 15 15 is_stmt 1 view .LVU6
  46              	.LBB5:
  23:main.c        ****         radio_data->multibyte.size = NUM_POS;
  47              		.loc 1 23 9 view .LVU7
  48              		.loc 1 23 36 is_stmt 0 view .LVU8
  49 0014 0430A0E3 		mov	r3, #4
  50 0018 0030C2E5 		strb	r3, [r2]
  24:main.c        ****         for (i = 0; i < NUM_POS; i++) {
  51              		.loc 1 24 9 is_stmt 1 view .LVU9
  52              	.LVL3:
  53              		.loc 1 24 21 view .LVU10
  25:main.c        ****           radio_data->multibyte.data[i] = positions[i];
  54              		.loc 1 25 11 view .LVU11
  55              		.loc 1 25 52 is_stmt 0 view .LVU12
  56 001c 24309FE5 		ldr	r3, .L4
  57              		.loc 1 25 41 view .LVU13
  58 0020 0010D3E5 		ldrb	r1, [r3]	@ zero_extendqisi2
  59              	.LVL4:
  60              		.loc 1 25 41 view .LVU14
  61 0024 0110C2E5 		strb	r1, [r2, #1]
  24:main.c        ****         for (i = 0; i < NUM_POS; i++) {
  62              		.loc 1 24 34 is_stmt 1 view .LVU15
  63              	.LVL5:
  24:main.c        ****         for (i = 0; i < NUM_POS; i++) {
  64              		.loc 1 24 21 view .LVU16
  65              		.loc 1 25 11 view .LVU17
  66              		.loc 1 25 41 is_stmt 0 view .LVU18
  67 0028 0110D3E5 		ldrb	r1, [r3, #1]	@ zero_extendqisi2
  68 002c 0210C2E5 		strb	r1, [r2, #2]
  24:main.c        ****         for (i = 0; i < NUM_POS; i++) {
  69              		.loc 1 24 34 is_stmt 1 view .LVU19
  70              	.LVL6:
  24:main.c        ****         for (i = 0; i < NUM_POS; i++) {
  71              		.loc 1 24 21 view .LVU20
  72              		.loc 1 25 11 view .LVU21
  73              		.loc 1 25 41 is_stmt 0 view .LVU22
  74 0030 0210D3E5 		ldrb	r1, [r3, #2]	@ zero_extendqisi2
  75 0034 0310C2E5 		strb	r1, [r2, #3]
  24:main.c        ****         for (i = 0; i < NUM_POS; i++) {
  76              		.loc 1 24 34 is_stmt 1 view .LVU23
  77              	.LVL7:
  24:main.c        ****         for (i = 0; i < NUM_POS; i++) {
  78              		.loc 1 24 21 view .LVU24
  79              		.loc 1 25 11 view .LVU25
  80              		.loc 1 25 41 is_stmt 0 view .LVU26
  81 0038 0330D3E5 		ldrb	r3, [r3, #3]	@ zero_extendqisi2
  82 003c 0100A0E3 		mov	r0, #1
  83 0040 0430C2E5 		strb	r3, [r2, #4]
  24:main.c        ****         for (i = 0; i < NUM_POS; i++) {
  84              		.loc 1 24 34 is_stmt 1 view .LVU27
  85              	.LVL8:
  24:main.c        ****         for (i = 0; i < NUM_POS; i++) {
  86              		.loc 1 24 21 view .LVU28
  24:main.c        ****         for (i = 0; i < NUM_POS; i++) {
  87              		.loc 1 24 21 is_stmt 0 view .LVU29
  88              	.LBE5:
  89              	.LBE4:
  26:main.c        ****         }
  27:main.c        ****         return TRUE;
  28:main.c        ****       }
  29:main.c        ****       break;
  30:main.c        ****   }
  31:main.c        ****   return FALSE;
  32:main.c        **** }
  90              		.loc 1 32 1 view .LVU30
  91 0044 1EFF2FE1 		bx	lr
  92              	.L5:
  93              		.align	2
  94              	.L4:
  95 0048 00000000 		.word	.LANCHOR0
  96              		.cfi_endproc
  97              	.LFE0:
  99              		.section	.text.startup,"ax",%progbits
 100              		.align	2
 101              		.global	main
 102              		.syntax unified
 103              		.arm
 105              	main:
 106              	.LFB1:
  33:main.c        **** 
  34:main.c        **** 
  35:main.c        **** 
  36:main.c        **** 
  37:main.c        **** int main(void)
  38:main.c        **** {
 107              		.loc 1 38 1 is_stmt 1 view -0
 108              		.cfi_startproc
 109              		@ Function supports interworking.
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
  39:main.c        ****   hardware_init();
 112              		.loc 1 39 3 view .LVU32
  38:main.c        ****   hardware_init();
 113              		.loc 1 38 1 is_stmt 0 view .LVU33
 114 0000 70402DE9 		push	{r4, r5, r6, lr}
 115              	.LCFI0:
 116              		.cfi_def_cfa_offset 16
 117              		.cfi_offset 4, -16
 118              		.cfi_offset 5, -12
 119              		.cfi_offset 6, -8
 120              		.cfi_offset 14, -4
 121              		.loc 1 39 3 view .LVU34
 122 0004 FEFFFFEB 		bl	hardware_init
 123              	.LVL9:
  40:main.c        ****   
  41:main.c        ****   // Registers the register handler callback function
  42:main.c        ****   radio_add_reg_callback(register_handler);
 124              		.loc 1 42 3 is_stmt 1 view .LVU35
 125 0008 58009FE5 		ldr	r0, .L11
 126 000c FEFFFFEB 		bl	radio_add_reg_callback
 127              	.LVL10:
  43:main.c        ****   
  44:main.c        ****   
  45:main.c        ****   // Changes the color of the led (red) to show the boot
  46:main.c        ****   set_color_i(4, 0);
 128              		.loc 1 46 3 view .LVU36
 129 0010 0010A0E3 		mov	r1, #0
 130 0014 0400A0E3 		mov	r0, #4
 131 0018 FEFFFFEB 		bl	set_color_i
 132              	.LVL11:
  47:main.c        **** 
  48:main.c        ****   // Initialises the body module with the specified address (but do not start
  49:main.c        ****   // the PD controller)
  50:main.c        ****   
  51:main.c        ****   init_body_module(addresses[0]);
 133              		.loc 1 51 3 view .LVU37
 134 001c 4800A0E3 		mov	r0, #72
 135 0020 FEFFFFEB 		bl	init_body_module
 136              	.LVL12:
  52:main.c        ****   init_body_module(addresses[3]);
 137              		.loc 1 52 3 view .LVU38
 138 0024 1500A0E3 		mov	r0, #21
 139 0028 FEFFFFEB 		bl	init_body_module
 140              	.LVL13:
  53:main.c        ****   init_limb_module(addresses[1]);
 141              		.loc 1 53 3 view .LVU39
 142 002c 4900A0E3 		mov	r0, #73
 143 0030 FEFFFFEB 		bl	init_limb_module
 144              	.LVL14:
  54:main.c        ****   init_limb_module(addresses[2]);
 145              		.loc 1 54 3 view .LVU40
 146 0034 4A00A0E3 		mov	r0, #74
 147 0038 FEFFFFEB 		bl	init_limb_module
 148              	.LVL15:
 149              	.L8:
  55:main.c        ****   
  56:main.c        ****   
  57:main.c        ****   // And then... do this
  58:main.c        ****   while (1) {
 150              		.loc 1 58 3 view .LVU41
  59:main.c        ****     for(uint8_t i = 0; i < NUM_POS; i++) {
 151              		.loc 1 59 5 view .LVU42
 152              	.LBB6:
 153              		.loc 1 59 9 view .LVU43
 154              		.loc 1 59 24 view .LVU44
 155              	.LBE6:
  38:main.c        ****   hardware_init();
 156              		.loc 1 38 1 is_stmt 0 view .LVU45
 157 003c 0440A0E3 		mov	r4, #4
 158 0040 24609FE5 		ldr	r6, .L11+4
 159 0044 24509FE5 		ldr	r5, .L11+8
 160              	.LVL16:
 161              	.L7:
 162              	.LBB7:
  60:main.c        ****       positions[i] = bus_get(addresses[i], MREG_POSITION);
 163              		.loc 1 60 7 is_stmt 1 discriminator 3 view .LVU46
 164              		.loc 1 60 22 is_stmt 0 discriminator 3 view .LVU47
 165 0048 3010A0E3 		mov	r1, #48
 166 004c 0100D6E4 		ldrb	r0, [r6], #1	@ zero_extendqisi2
 167              	.LVL17:
 168              		.loc 1 60 22 discriminator 3 view .LVU48
 169 0050 FEFFFFEB 		bl	bus_get
 170              	.LVL18:
  59:main.c        ****     for(uint8_t i = 0; i < NUM_POS; i++) {
 171              		.loc 1 59 5 discriminator 3 view .LVU49
 172 0054 014044E2 		sub	r4, r4, #1
 173 0058 FF4014E2 		ands	r4, r4, #255
 174              		.loc 1 60 20 discriminator 3 view .LVU50
 175 005c 0100C5E4 		strb	r0, [r5], #1
  59:main.c        ****     for(uint8_t i = 0; i < NUM_POS; i++) {
 176              		.loc 1 59 37 is_stmt 1 discriminator 3 view .LVU51
 177              	.LVL19:
  59:main.c        ****     for(uint8_t i = 0; i < NUM_POS; i++) {
 178              		.loc 1 59 24 discriminator 3 view .LVU52
  59:main.c        ****     for(uint8_t i = 0; i < NUM_POS; i++) {
 179              		.loc 1 59 5 is_stmt 0 discriminator 3 view .LVU53
 180 0060 F8FFFF1A 		bne	.L7
 181 0064 F4FFFFEA 		b	.L8
 182              	.L12:
 183              		.align	2
 184              	.L11:
 185 0068 00000000 		.word	register_handler
 186 006c 00000000 		.word	.LANCHOR1
 187 0070 00000000 		.word	.LANCHOR0
 188              	.LBE7:
 189              		.cfi_endproc
 190              	.LFE1:
 192              		.global	positions
 193              		.global	addresses
 194              		.section	.rodata
 195              		.set	.LANCHOR1,. + 0
 198              	addresses:
 199 0000 48494A15 		.ascii	"HIJ\025"
 200              		.bss
 201              		.set	.LANCHOR0,. + 0
 204              	positions:
 205 0000 00000000 		.space	4
 206              		.text
 207              	.Letext0:
 208              		.file 2 "c:\\arm-gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 209              		.file 3 "c:\\arm-gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 210              		.file 4 "../firmware/radio.h"
 211              		.file 5 "../firmware/robot.h"
 212              		.file 6 "../firmware/hardware.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\agrillo\AppData\Local\Temp\ccyaPPzU.s:17     .text:00000000 $a
C:\Users\agrillo\AppData\Local\Temp\ccyaPPzU.s:21     .text:00000000 register_handler
C:\Users\agrillo\AppData\Local\Temp\ccyaPPzU.s:95     .text:00000048 $d
C:\Users\agrillo\AppData\Local\Temp\ccyaPPzU.s:100    .text.startup:00000000 $a
C:\Users\agrillo\AppData\Local\Temp\ccyaPPzU.s:105    .text.startup:00000000 main
C:\Users\agrillo\AppData\Local\Temp\ccyaPPzU.s:185    .text.startup:00000068 $d
C:\Users\agrillo\AppData\Local\Temp\ccyaPPzU.s:204    .bss:00000000 positions
C:\Users\agrillo\AppData\Local\Temp\ccyaPPzU.s:198    .rodata:00000000 addresses
C:\Users\agrillo\AppData\Local\Temp\ccyaPPzU.s:205    .bss:00000000 $d

UNDEFINED SYMBOLS
hardware_init
radio_add_reg_callback
set_color_i
init_body_module
init_limb_module
bus_get
